# Объявите функцию с именем get_list и следующим описанием в теле функции:
#
# """Функция для формирования списка целых значений"""
#
# Сама функция должна формировать и возвращать список целых чисел,
# который поступает на ее вход в виде строки из целых чисел,
# записанных через пробел.
#
# Определите декоратор sumitems, который выполняет суммирование значений из списка этой функции и возвращает результат.
# Внутри декоратора декорируйте переданную функцию get_list с помощью команды @wraps
# (не забудьте сделать импорт: from functools import wraps).
# Такое декорирование необходимо, чтобы исходная функция get_list сохраняла
# свои локальные свойства: __name__ и __doc__.
#
# Примените декоратор к функции get_list, но не вызывайте ее.

# ===================== ваш код =====================
from functools import wraps

def sumitems(func):
    @wraps(func)
    def wrapper(*args):
        a = func(*args)
        return sum(a)
    return wrapper


@sumitems
def get_list(s):
    """Функция для формирования списка целых значений"""
    r = [int(i) for i in s.split()]
    return r


# ===================== проверка =====================
assert sumitems, "декоратор не найден"
str_1 = "1 2 3 4 5 6 7 8 9"
lst = get_list(str_1)
assert get_list.__name__ == "get_list", "функция get_list вернула неожиданный результат"
assert get_list.__doc__ == "Функция для формирования списка целых значений", "функция get_list вернула неожиданный результат"
assert lst == 45, "функция get_list вернула неожиданный результат"
print(lst)